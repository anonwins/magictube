#!/bin/bash
#    ____ ___  ____ _____ _(_)____/ /___  __/ /_  ___ 
#   / __ `__ \/ __ `/ __ `/ / ___/ __/ / / / __ \/ _ \
#  / / / / / / /_/ / /_/ / / /__/ /_/ /_/ / /_/ /  __/
# /_/ /_/ /_/\__,_/\__, /_/\___/\__/\__,_/_.___/\___/ 
#                 /____/
# magictube v3.3 by anonwins (https://github.com/anonwins/magictube)

# CONFIG ###################################################################

  # The download directory. Uncomment to explicitly set it.
  # If commented, your current working directory is used.
  # cd "~/Music/magictube"

  # The list of supported downloaders.
  # You can change the order if you like, or add another fork of youtube-dl.
  downloaders=("yt-dlp" "youtube-dl" "youtube-dlc")

# SCRIPT ###################################################################

# check for available downloader
for t in ${downloaders[@]}; do
  if command -v $t &> /dev/null
  then
    downloader=$t
    break
  fi
done

# exit if there is no available downloader
if test -z "$downloader"
then
  echo "there is no available downloader."
  echo "supported downloaders:"
  echo "yt-dlp (https://github.com/yt-dlp/yt-dlp) (recommended)"
  echo "youtube-dl (https://youtube-dl.org)"
  echo "youtube-dlc (https://github.com/blackjack4494/yt-dlc)"
  exit
fi

# clear screen for immersion
clear

# start the magic!
counter=0
while :
do

  ((counter++))

  # ask for input
  read -p "$counter. " query
  query=${query//[^[:alpha:][:digit:] .,!@#$%&()?_-]/}

  # search on youtube
  user_agent="Mozilla/5.0 (iPhone; CPU iPhone OS 6_1_3 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) CriOS/28.0.1500.12 Mobile/10B329 Safari/8536.25"
  results=$(curl --silent -A "$user_agent" -G --data-urlencode "sp=mAEA" --data-urlencode "search_query=$query" --data-urlencode "app=m.html" --data-urlencode "persist_app=1" https://m.youtube.com/results)
  
  # get first video_id
  video_id=$(echo $results | awk -F "x22videoId" '{print $2}' | head -c20 | cut -c 10-)

  # skip if there's no video_id
  if test -z "$video_id"
  then
      echo -en "\033[1A\033[2K"
      echo "$counter. $query (not found)"
      continue
  fi

  # get title
  title=$(echo $results | awk -F "x22title" '{print $2}' | cut -c 48- | head -c120 | awk -F "x7d" '{print $1}' | rev | cut -c 6- | rev) # locate the title
  title=$(echo $title | sed "s/\\\x22//g" | sed "s/\\\x27//g" | sed "s/\u0026/\&/g") # replace html-encoded characters
  title=${title//[^[:alpha:][:digit:] .,!@#$%&()?_-]/} # strip weird characters
  title=$(echo $title | sed "s/\   /\ /g" | sed "s/\  /\ /g") # remove extra spaces

  # print title
  echo -en "\033[1A\033[2K"
  echo "$counter. $title"

  # generate filename
  filename="$title.m4a"

  # if song isn't already saved
  if [ ! -f "$filename" ]; then

    # delete temp file if script gets interrupted & exit properly
    trap "[ -f \"$filename.part\" ] && rm -f \"$filename.part\"; echo \"\"; exit 130" INT
    
    # download song in m4a format
    $downloader --quiet --no-warnings --no-mtime -f 140 -o "$filename" https://www.youtube.com/watch?v=$video_id &>/dev/null

  fi
  
  # open the song in detached process
  setsid xdg-open "./$filename" > /dev/null 2>&1

done
